databse.py

import sqlite3
import os

def criar_banco():
    # Verifica se o diret√≥rio existe, se n√£o, cria
    banco_path = r"C:/Curso Python Estacio/feedback_alunos/database"
    if not os.path.exists(banco_path):
        os.makedirs(banco_path)  # Cria o diret√≥rio se n√£o existir

    # Conectar ao banco de dados (ou criar se n√£o existir)
    conn = sqlite3.connect(r"C:/Curso Python Estacio/feedback_alunos/database/feedback.db")
    cursor = conn.cursor()

    # Criar tabela de usu√°rios
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS usuarios (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT NOT NULL,
        email TEXT UNIQUE NOT NULL,
        senha TEXT NOT NULL,
        tipo_usuario TEXT NOT NULL,
        ano_turma TEXT,
        disciplinas TEXT
    )''')

    # Criar tabela de feedbacks
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS feedbacks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        usuario_id INTEGER,
        disciplina TEXT NOT NULL,
        professor TEXT NOT NULL,
        clareza INTEGER CHECK(clareza BETWEEN 1 AND 5),
        material_apoio INTEGER CHECK(material_apoio BETWEEN 1 AND 5),
        participacao INTEGER CHECK(participacao BETWEEN 1 AND 5),
        motivacao INTEGER NOT NULL,
        desafio TEXT,
        comentarios TEXT,
        FOREIGN KEY(usuario_id) REFERENCES usuarios(id)
    )''')

    # Salvar e fechar conex√£o
    print("Banco de dados e tabelas criadas com sucesso")
    conn.commit()
    conn.close()

def buscar_disciplinas_por_professor(nome_professor):
    # Conectar ao banco de dados
    conn = sqlite3.connect(r"C:/Curso Python Estacio/feedback_alunos/database/feedback.db")
    cursor = conn.cursor()

    # Buscar as disciplinas associadas ao professor
    cursor.execute("SELECT disciplinas FROM usuarios WHERE tipo_usuario = 'Professor' AND nome = ?", (nome_professor,))
    resultado = cursor.fetchone()
    
    conn.close()

    # Se o professor tiver disciplinas cadastradas
    if resultado:
        # Separamos as disciplinas em uma lista
        disciplinas = resultado[0].split(",")  # Aqui consideramos que as disciplinas s√£o separadas por v√≠rgula
        return disciplinas
    return None

# Fun√ß√£o chamada para criar o banco
if __name__ == "__main__":
    criar_banco()





app.py

import streamlit as st
import sqlite3
import bcrypt
from feedback import tela_feedback  # Importando a tela de feedback
from professor import tela_professor  # Importando a tela do professor

# Fun√ß√£o para conectar ao banco de dados
def conectar_bd():
    return sqlite3.connect(r"C:/Curso Python Estacio/feedback_alunos/database/feedback.db")

# Fun√ß√£o para cadastrar usu√°rio
def cadastrar_usuario(nome, email, senha, tipo_usuario, ano_turma, disciplinas):
    conn = conectar_bd()
    cursor = conn.cursor()
    try:
        senha_hash = bcrypt.hashpw(senha.encode(), bcrypt.gensalt())
        cursor.execute("INSERT INTO usuarios (nome, email, senha, tipo_usuario, ano_turma, disciplinas) VALUES (?, ?, ?, ?, ?, ?)",
                       (nome, email, senha_hash, tipo_usuario, ano_turma, disciplinas))
        conn.commit()
        st.success("Usu√°rio cadastrado com sucesso!")
    except sqlite3.IntegrityError:
        st.error("Erro: Email j√° cadastrado!")
    finally:
        conn.close()

# Fun√ß√£o para verificar login
def verificar_login(email, senha):
    conn = conectar_bd()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM usuarios WHERE email = ?", (email,))
    usuario = cursor.fetchone()
    conn.close()
    
    if usuario and bcrypt.checkpw(senha.encode(), usuario[3]):
        return usuario
    return None

# Gerenciando a navega√ß√£o entre p√°ginas
def tela_login():
    st.title("Sistema de Feedback - Login & Cadastro")
    
    menu = st.sidebar.selectbox("Menu", ["Login", "Cadastro"])
    
    if menu == "Cadastro":
        st.subheader("Cadastro de Usu√°rio")
        nome = st.text_input("Nome")
        email = st.text_input("Email")
        senha = st.text_input("Senha", type="password")
        tipo_usuario = st.selectbox("Tipo de Usu√°rio", ["Aluno", "Professor", "Administrador"])
        ano_turma = st.text_input("Ano/Turma (se aluno)")
        disciplinas = st.text_input("Disciplinas (se professor)")
        if st.button("Cadastrar"):
            cadastrar_usuario(nome, email, senha, tipo_usuario, ano_turma, disciplinas)
    
    elif menu == "Login":
        st.subheader("Login de Usu√°rio")
        email = st.text_input("Email")
        senha = st.text_input("Senha", type="password")
        if st.button("Entrar"):
            usuario = verificar_login(email, senha)
            if usuario:
                st.session_state["usuario_id"] = usuario[0]
                st.session_state["nome_usuario"] = usuario[1]
                st.session_state["tipo_usuario"] = usuario[4]  # Salva o tipo de usu√°rio
                st.session_state["logged_in"] = True
                st.session_state["page"] = "menu"  # Define a p√°gina inicial ap√≥s login
                st.rerun()
            else:
                st.error("Email ou senha incorretos!")

# Tela principal ap√≥s login
def tela_menu():
    st.sidebar.title("Menu Principal")
    tipo_usuario = st.session_state.get("tipo_usuario", "")
    
    if tipo_usuario == "Aluno":
        st.sidebar.button("Feedback", on_click=lambda: st.session_state.update({"page": "feedback"}))
    elif tipo_usuario == "Professor":
        st.sidebar.button("Meus Feedbacks", on_click=lambda: st.session_state.update({"page": "professor"}))
    
    if st.sidebar.button("Sair"):
        st.session_state.clear()
        st.rerun()

# Controle de navega√ß√£o
if __name__ == "__main__":
    if "logged_in" not in st.session_state:
        st.session_state["logged_in"] = False

    if "page" not in st.session_state:
        st.session_state["page"] = "login"

    if st.session_state["logged_in"]:
        if st.session_state["page"] == "feedback" and st.session_state["tipo_usuario"] == "Aluno":
            tela_feedback()
        elif st.session_state["page"] == "professor" and st.session_state["tipo_usuario"] == "Professor":
            tela_professor()
        else:
            tela_menu()
    else:
        tela_login()








feedback.py

import streamlit as st
import sqlite3

def conectar_bd():
    return sqlite3.connect(r"C:/Curso Python Estacio/feedback_alunos/database/feedback.db")

def buscar_disciplinas_por_professor(nome_professor):
    conn = conectar_bd()
    cursor = conn.cursor()
    cursor.execute("SELECT disciplinas FROM usuarios WHERE tipo_usuario = 'Professor' AND nome = ?", (nome_professor,))
    resultado = cursor.fetchone()
    conn.close()

    if resultado:
        disciplinas = resultado[0].split(",")  # Separa as disciplinas por v√≠rgula
        return disciplinas
    return []

def enviar_feedback(usuario_id, disciplina, professor, clareza, material_apoio, participacao, motivacao, desafio, comentarios):
    conn = conectar_bd()
    cursor = conn.cursor()
    cursor.execute(""" 
        INSERT INTO feedbacks (usuario_id, disciplina, professor, clareza, material_apoio, participacao, motivacao, desafio, comentarios) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (usuario_id, disciplina, professor, clareza, material_apoio, participacao, motivacao, desafio, comentarios))
    conn.commit()
    conn.close()
    st.success("‚úÖ Feedback enviado com sucesso!")

def tela_feedback():
    st.title(f"üìå Feedback de Aula - Bem-vindo, {st.session_state.get('nome_usuario', 'Usu√°rio')}")

    if "usuario_id" not in st.session_state:
        st.error("‚ùå Erro: Usu√°rio n√£o autenticado.")
        return

    usuario_id = st.session_state["usuario_id"]

    # Se o usu√°rio for aluno, exibir a lista de professores
    if st.session_state.get("tipo_usuario") == "Aluno":
        conn = conectar_bd()
        cursor = conn.cursor()

        # Buscar todos os professores cadastrados
        cursor.execute("SELECT nome FROM usuarios WHERE tipo_usuario = 'Professor'")
        professores = [p[0] for p in cursor.fetchall()]
        conn.close()

        if professores:
            professor = st.selectbox("üë®‚Äçüè´ Escolha um professor", professores)
            disciplinas = buscar_disciplinas_por_professor(professor)
            if disciplinas:
                disciplina = st.selectbox("üìö Disciplina", disciplinas)
            else:
                disciplina = st.text_input("üìö Disciplina")
        else:
            st.warning("‚ö†Ô∏è Nenhum professor cadastrado.")

    else:
        st.error("‚ùå Erro: Tipo de usu√°rio inv√°lido.")

    clareza = st.slider("üìñ Clareza da explica√ß√£o", 1, 5, 3)
    material_apoio = st.slider("üìÇ Qualidade do material de apoio", 1, 5, 3)
    participacao = st.slider("üé§ Possibilidade de participa√ß√£o", 1, 5, 3)
    motivacao = st.radio("üî• O professor motiva os alunos?", [1, 0], format_func=lambda x: "Sim" if x == 1 else "N√£o")
    desafio = st.text_area("üöß Desafios enfrentados")
    comentarios = st.text_area("üìù Coment√°rios adicionais")

    if st.button("‚úÖ Enviar Feedback"):
        if disciplina and professor:
            enviar_feedback(usuario_id, disciplina, professor, clareza, material_apoio, participacao, motivacao, desafio, comentarios)
        else:
            st.error("‚ö†Ô∏è Preencha todos os campos obrigat√≥rios!")

    # üî¥ Bot√£o de Logout (agora dentro da fun√ß√£o)
    if st.button("üö™ Sair"):
        st.session_state["logged_in"] = False
        st.session_state.pop("usuario_id", None)
        st.session_state.pop("nome_usuario", None)
        st.session_state["page"] = "login"
        st.rerun()  # Atualiza a p√°gina e volta para o login


professor.py

import streamlit as st
import sqlite3

def conectar_bd():
    return sqlite3.connect(r"C:/Curso Python Estacio/feedback_alunos/database/feedback.db")

def obter_feedbacks_do_professor(nome_professor):
    conn = conectar_bd()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT f.disciplina, u.nome, f.clareza, f.material_apoio, f.participacao, f.motivacao, f.desafio, f.comentarios 
        FROM feedbacks f
        JOIN usuarios u ON f.usuario_id = u.id
        WHERE f.professor = ?
    """, (nome_professor,))
    
    feedbacks = cursor.fetchall()
    conn.close()
    return feedbacks

def tela_professor():
    st.title(f"Feedbacks Recebidos - Professor {st.session_state.get('nome_usuario', 'Usu√°rio')}")

    if "usuario_id" not in st.session_state or st.session_state.get("tipo_usuario") != "Professor":
        st.error("Acesso negado. Esta p√°gina √© exclusiva para professores.")
        return

    nome_professor = st.session_state.get("nome_usuario")
    feedbacks = obter_feedbacks_do_professor(nome_professor)

    if not feedbacks:
        st.info("Nenhum feedback recebido ainda.")
        return

    st.write("### Feedbacks dos Alunos")
    for feedback in feedbacks:
        disciplina, nome_aluno, clareza, material_apoio, participacao, motivacao, desafio, comentarios = feedback
        st.subheader(f"Disciplina: {disciplina}")
        st.write(f"**Aluno:** {nome_aluno}")  # Exibindo o nome do aluno
        st.write(f"**Clareza da explica√ß√£o:** {clareza}/5")
        st.write(f"**Material de apoio:** {material_apoio}/5")
        st.write(f"**Participa√ß√£o:** {participacao}/5")
        st.write(f"**Professor motiva os alunos?** {'Sim' if motivacao == 1 else 'N√£o'}")
        st.write(f"**Desafios enfrentados:** {desafio}")
        st.write(f"**Coment√°rios adicionais:** {comentarios}")
        st.markdown("---")

    if st.button("Sair"):
        st.session_state["logged_in"] = False
        st.session_state.pop("usuario_id", None)
        st.session_state.pop("nome_usuario", None)
        st.session_state["page"] = "login"
        st.rerun()



