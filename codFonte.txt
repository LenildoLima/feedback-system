databse.py

import sqlite3

def criar_banco():
    # Conectar ao banco de dados (ou criar se não existir)
    conn = sqlite3.connect(r"C:/Curso Python Estacio/feedback_alunos/database/feedback.db")
    cursor = conn.cursor()

    # Criar tabela de usuários
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS usuarios (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT NOT NULL,
        email TEXT UNIQUE NOT NULL,
        senha TEXT NOT NULL,  -- Agora com a coluna senha
        tipo_usuario TEXT NOT NULL,
        ano_turma TEXT,
        disciplinas TEXT
    )''')

    # Criar tabela de feedbacks
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS feedbacks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        usuario_id INTEGER,
        disciplina TEXT NOT NULL,
        professor TEXT NOT NULL,
        clareza INTEGER CHECK(clareza BETWEEN 1 AND 5),
        material_apoio INTEGER CHECK(material_apoio BETWEEN 1 AND 5),
        participacao INTEGER CHECK(participacao BETWEEN 1 AND 5),
        motivacao INTEGER NOT NULL, -- 0 = False, 1 = True
        desafio TEXT,
        comentarios TEXT,
        FOREIGN KEY(usuario_id) REFERENCES usuarios(id)
    )''')

    # Salvar e fechar conexão
    print("Banco de dados e tabelas criadas com sucesso")
    conn.commit()
    conn.close()

if __name__ == "__main__":
    criar_banco()

app.py

import streamlit as st
import sqlite3
import bcrypt
from feedback import tela_feedback  # Importando a tela de feedback

# Função para conectar ao banco de dados
def conectar_bd():
    return sqlite3.connect(r"C:/Curso Python Estacio/feedback_alunos/database/feedback.db")

# Função para cadastrar usuário
def cadastrar_usuario(nome, email, senha, tipo_usuario, ano_turma, disciplinas):
    conn = conectar_bd()
    cursor = conn.cursor()
    try:
        senha_hash = bcrypt.hashpw(senha.encode(), bcrypt.gensalt())
        cursor.execute("INSERT INTO usuarios (nome, email, senha, tipo_usuario, ano_turma, disciplinas) VALUES (?, ?, ?, ?, ?, ?)",
                       (nome, email, senha_hash, tipo_usuario, ano_turma, disciplinas))
        conn.commit()
        st.success("Usuário cadastrado com sucesso!")
    except sqlite3.IntegrityError:
        st.error("Erro: Email já cadastrado!")
    finally:
        conn.close()

# Função para verificar login
def verificar_login(email, senha):
    conn = conectar_bd()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM usuarios WHERE email = ?", (email,))
    usuario = cursor.fetchone()
    conn.close()
    
    if usuario and bcrypt.checkpw(senha.encode(), usuario[3]):
        return usuario
    return None

# Criando a interface Streamlit
def tela_login():
    st.title("Sistema de Feedback - Login & Cadastro")
    
    menu = st.sidebar.selectbox("Menu", ["Login", "Cadastro"])
    
    if menu == "Cadastro":
        st.subheader("Cadastro de Usuário")
        nome = st.text_input("Nome")
        email = st.text_input("Email")
        senha = st.text_input("Senha", type="password")
        tipo_usuario = st.selectbox("Tipo de Usuário", ["Aluno", "Professor", "Administrador"])
        ano_turma = st.text_input("Ano/Turma (se aluno)")
        disciplinas = st.text_input("Disciplinas (se professor)")
        if st.button("Cadastrar"):
            cadastrar_usuario(nome, email, senha, tipo_usuario, ano_turma, disciplinas)
    
    elif menu == "Login":
        st.subheader("Login de Usuário")
        email = st.text_input("Email")
        senha = st.text_input("Senha", type="password")
        if st.button("Entrar"):
            usuario = verificar_login(email, senha)
            if usuario:
                st.session_state["usuario_id"] = usuario[0]
                st.session_state["nome_usuario"] = usuario[1]
                st.session_state["logged_in"] = True
                st.session_state["page"] = "feedback"  # Define a página após login
                st.rerun()
            else:
                st.error("Email ou senha incorretos!")

# Gerenciando a navegação entre páginas
if __name__ == "__main__":
    if "logged_in" not in st.session_state:
        st.session_state["logged_in"] = False

    if "page" not in st.session_state:
        st.session_state["page"] = "login"

    if st.session_state["logged_in"]:
        tela_feedback()  # Agora a função de feedback será chamada corretamente
    else:
        tela_login()



feedback.py

import streamlit as st
import sqlite3

def conectar_bd():
    return sqlite3.connect(r"C:/Curso Python Estacio/feedback_alunos/database/feedback.db")

def enviar_feedback(usuario_id, disciplina, professor, clareza, material_apoio, participacao, motivacao, desafio, comentarios):
    conn = conectar_bd()
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO feedbacks (usuario_id, disciplina, professor, clareza, material_apoio, participacao, motivacao, desafio, comentarios)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (usuario_id, disciplina, professor, clareza, material_apoio, participacao, motivacao, desafio, comentarios))
    conn.commit()
    conn.close()
    st.success("Feedback enviado com sucesso!")

def tela_feedback():
    st.title(f"Feedback de Aula - Bem-vindo, {st.session_state.get('nome_usuario', 'Usuário')}")

    if "usuario_id" not in st.session_state:
        st.error("Erro: Usuário não autenticado.")
        return

    usuario_id = st.session_state["usuario_id"]
    disciplina = st.text_input("Disciplina")
    professor = st.text_input("Professor")
    clareza = st.slider("Clareza da explicação", 1, 5, 3)
    material_apoio = st.slider("Qualidade do material de apoio", 1, 5, 3)
    participacao = st.slider("Possibilidade de participação", 1, 5, 3)
    motivacao = st.radio("O professor motiva os alunos?", [1, 0], format_func=lambda x: "Sim" if x == 1 else "Não")
    desafio = st.text_area("Desafios enfrentados")
    comentarios = st.text_area("Comentários adicionais")

    if st.button("Enviar Feedback"):
        if disciplina and professor:
            enviar_feedback(usuario_id, disciplina, professor, clareza, material_apoio, participacao, motivacao, desafio, comentarios)
        else:
            st.error("Preencha todos os campos obrigatórios!")